<template>
	<view class="container">
		<!-- 顶部导航栏 -->
		<view class="nav-bar">
			<view class="back-btn" @tap="goBack">
				<text class="back-icon">←</text>
			</view>
			<text class="title">注册账号</text>
		</view>

		<!-- 注册表单 -->
		<view class="form-section">
			<view class="form-item">
				<text class="form-label">手机号</text>
				<input class="form-input" 
					v-model="formData.phone" 
					type="number" 
					placeholder="请输入手机号" 
					maxlength="11" />
			</view>
			<view class="form-item">
				<text class="form-label">验证码</text>
				<view class="verify-code">
					<input class="form-input" 
						v-model="formData.code" 
						type="number" 
						placeholder="请输入验证码" 
						maxlength="6" />
					<button class="code-btn" 
						:disabled="countdown > 0" 
						@tap="sendCode">
						{{ countdown > 0 ? `${countdown}s` : '获取验证码' }}
					</button>
				</view>
			</view>
			<view class="form-item">
				<text class="form-label">密码</text>
				<input class="form-input" 
					v-model="formData.password" 
					type="password" 
					placeholder="请输入密码" />
			</view>
			<view class="form-item">
				<text class="form-label">确认密码</text>
				<input class="form-input" 
					v-model="formData.confirmPassword" 
					type="password" 
					placeholder="请再次输入密码" />
			</view>
		</view>

		<!-- 注册按钮 -->
		<view class="btn-section">
			<button class="submit-btn" @tap="handleRegister">注册</button>
		</view>

		<!-- 用户协议 -->
		<view class="agreement">
			<checkbox-group @change="handleAgreementChange">
				<checkbox :checked="isAgree" />
				<text class="agreement-text">我已阅读并同意</text>
				<text class="link" @tap="goToAgreement">《用户协议》</text>
			</checkbox-group>
		</view>
	</view>
</template>

<script setup lang="uts">
import { ref } from 'vue'

// 表单数据
const formData = ref({
	phone: '',
	code: '',
	password: '',
	confirmPassword: ''
})

// 倒计时
const countdown = ref(0)

// 是否同意协议
const isAgree = ref(false)

// 返回上一页
const goBack = () => {
	uni.navigateBack({
		delta: 1,
		fail: () => {
			uni.switchTab({
				url: '/pages/index/index'
			})
		}
	})
}

// 发送验证码
const sendCode = () => {
	if (countdown.value > 0) return
	
	// 验证手机号
	if (!/^1[3-9]\d{9}$/.test(formData.value.phone)) {
		uni.showToast({
			title: '请输入正确的手机号',
			icon: 'none'
		})
		return
	}
	
	// 开始倒计时
	countdown.value = 60
	const timer = setInterval(() => {
		countdown.value--
		if (countdown.value <= 0) {
			clearInterval(timer)
		}
	}, 1000)
	
	// 发送验证码请求
	uni.request({
		url: '/api/send-code',
		method: 'POST',
		data: {
			phone: formData.value.phone
		},
		success: (res) => {
			uni.showToast({
				title: '验证码已发送',
				icon: 'success'
			})
		},
		fail: (err) => {
			console.error('发送验证码失败：', err)
			uni.showToast({
				title: '发送失败',
				icon: 'none'
			})
		}
	})
}

// 处理协议勾选
const handleAgreementChange = (e: any) => {
	isAgree.value = e.detail.value.length > 0
}

// 跳转到协议页面
const goToAgreement = () => {
	uni.navigateTo({
		url: '/pages/login/protocal'
	})
}

// 表单验证
const validateForm = () => {
	if (!formData.value.phone.trim()) {
		uni.showToast({
			title: '请输入手机号',
			icon: 'none'
		})
		return false
	}
	
	if (!/^1[3-9]\d{9}$/.test(formData.value.phone)) {
		uni.showToast({
			title: '请输入正确的手机号',
			icon: 'none'
		})
		return false
	}
	
	if (!formData.value.code.trim()) {
		uni.showToast({
			title: '请输入验证码',
			icon: 'none'
		})
		return false
	}
	
	if (!formData.value.password.trim()) {
		uni.showToast({
			title: '请输入密码',
			icon: 'none'
		})
		return false
	}
	
	if (formData.value.password.length < 6) {
		uni.showToast({
			title: '密码长度不能小于6位',
			icon: 'none'
		})
		return false
	}
	
	if (formData.value.password !== formData.value.confirmPassword) {
		uni.showToast({
			title: '两次输入的密码不一致',
			icon: 'none'
		})
		return false
	}
	
	if (!isAgree.value) {
		uni.showToast({
			title: '请阅读并同意用户协议',
			icon: 'none'
		})
		return false
	}
	
	return true
}

// 注册
const handleRegister = async () => {
	if (!validateForm()) return
	
	try {
		const res = await uni.request({
			url: '/api/register',
			method: 'POST',
			data: formData.value
		})
		
		uni.showToast({
			title: '注册成功',
			icon: 'success'
		})
		
		setTimeout(() => {
			uni.navigateBack()
		}, 1500)
	} catch (err) {
		console.error('注册失败：', err)
		uni.showToast({
			title: '注册失败',
			icon: 'none'
		})
	}
}
</script>

<style>
.container {
	min-height: 100vh;
	background-color: #f7f7f7;
}

.nav-bar {
	display: flex;
	align-items: center;
	padding: 20rpx;
	background-color: #fff;
	border-bottom: 1rpx solid #f5f5f5;
}

.back-btn {
	padding: 20rpx;
	display: flex;
	align-items: center;
	justify-content: center;
}

.back-icon {
	font-size: 40rpx;
	color: #333;
	font-weight: bold;
}

.title {
	flex: 1;
	text-align: center;
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
}

.form-section {
	margin-top: 20rpx;
	background-color: #fff;
	padding: 0 30rpx;
}

.form-item {
	display: flex;
	align-items: center;
	min-height: 100rpx;
	border-bottom: 1rpx solid #f5f5f5;
}

.form-item:last-child {
	border-bottom: none;
}

.form-label {
	width: 160rpx;
	font-size: 28rpx;
	color: #333;
}

.form-input {
	flex: 1;
	font-size: 28rpx;
	color: #333;
}

.verify-code {
	display: flex;
	align-items: center;
	flex: 1;
}

.code-btn {
	margin-left: 20rpx;
	padding: 0 30rpx;
	height: 60rpx;
	line-height: 60rpx;
	font-size: 24rpx;
	color: #4A90E2;
	background-color: #fff;
	border: 1rpx solid #4A90E2;
	border-radius: 30rpx;
}

.code-btn[disabled] {
	color: #999;
	border-color: #ddd;
}

.btn-section {
	padding: 40rpx 30rpx;
}

.submit-btn {
	width: 100%;
	height: 88rpx;
	line-height: 88rpx;
	text-align: center;
	font-size: 32rpx;
	color: #fff;
	background-color: #4A90E2;
	border-radius: 44rpx;
}

.agreement {
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 20rpx;
}

.agreement checkbox-group {
	display: flex;
	align-items: center;
}

.agreement checkbox {
	margin-right: 8rpx;
}

.agreement-text {
	font-size: 24rpx;
	color: #666;
}

.link {
	font-size: 24rpx;
	color: #4A90E2;
}
</style> 