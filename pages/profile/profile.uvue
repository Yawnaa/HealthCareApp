<template>
	<view class="container">
		<!-- 用户信息区域 -->
		<view class="user-info-section">
			<view class="user-info">
				<view class="info-content">
					<text class="user-name">{{ userInfo.name || '未设置姓名' }}</text>
					<text class="user-phone">{{ userInfo.phone || '未绑定手机' }}</text>
					<text class="doctor-info">就诊医生：{{ userInfo.doctor || '未分配' }}</text>
					<text class="symptom-score">症候积分：{{ userInfo.score || '0' }}</text>
				</view>
				<view class="avatar-section" @tap="handleUploadAvatar">
					<image :src="userInfo.avatar || '/static/icons/default-avatar.png'" class="avatar" mode="aspectFill"></image>
					<view class="edit-avatar-hint">修改头像</view>
				</view>
			</view>
		</view>

		<!-- 功能列表 -->
		<view class="menu-list">
			<view class="menu-item" @tap="handleUpdateProfile">
				<text class="menu-text">个人信息更新</text>
				<text class="arrow">></text>
			</view>
			<view class="menu-item" @tap="handleUpdateHealth">
				<text class="menu-text">体质信息更新</text>
				<text class="arrow">></text>
			</view>
			<view class="menu-item" @tap="handleChangePassword">
				<text class="menu-text">修改密码</text>
				<text class="arrow">></text>
			</view>
			<view class="menu-item" @tap="handleCheckUpdate">
				<text class="menu-text">版本更新</text>
				<text class="arrow">></text>
			</view>
		</view>

		<!-- 退出登录按钮 -->
		<view class="logout-section">
			<button class="logout-button" @tap="handleLogout">退出登录</button>
		</view>
	</view>
</template>

<script>
export default {
	data() {
		return {
			userInfo: {
				avatar: '',
				name: '张三',
				phone: '138****8888',
				doctor: '李医生',
				score: '11'
			}
		}
	},
	methods: {
		// 上传头像
		handleUploadAvatar() {
			uni.chooseImage({
				count: 1,
				sizeType: ['compressed'],
				sourceType: ['album', 'camera'],
				success: (res) => {
					const tempFilePath = res.tempFilePaths[0]
					uni.showLoading({
						title: '上传中...'
					})
					
					// 这里替换为实际的上传接口
					uni.uploadFile({
						url: 'YOUR_UPLOAD_API',
						filePath: tempFilePath,
						name: 'avatar',
						success: (uploadRes) => {
							const data = JSON.parse(uploadRes.data)
							this.userInfo.avatar = data.url
							uni.showToast({
								title: '头像更新成功',
								icon: 'success'
							})
						},
						fail: (err) => {
							console.error('上传失败：', err)
							uni.showToast({
								title: '上传失败',
								icon: 'none'
							})
						},
						complete: () => {
							uni.hideLoading()
						}
					})
				}
			})
		},
		
		// 更新个人信息
		handleUpdateProfile() {
			uni.navigateTo({
				url: '/pages/profile/update-profile'
			})
		},
		
		// 更新体质信息
		handleUpdateHealth() {
			uni.navigateTo({
				url: '/pages/profile/update-health'
			})
		},
		
		// 修改密码
		handleChangePassword() {
			uni.navigateTo({
				url: '/pages/profile/change-password'
			})
		},
		
		// 检查更新
		handleCheckUpdate() {
			uni.showLoading({
				title: '检查更新中...'
			})
			// 这里替换为实际的检查更新接口
			setTimeout(() => {
				uni.hideLoading()
				uni.showToast({
					title: '已是最新版本',
					icon: 'none'
				})
			}, 1500)
		},
		
		// 退出登录
		handleLogout() {
			uni.showModal({
				title: '提示',
				content: '确定要退出登录吗？',
				success: (res) => {
					if (res.confirm) {
						uni.reLaunch({
							url: '/pages/login/login'
						})
					}
				}
			})
		}
	}
}
</script>

<style>
.container {
	min-height: 100vh;
	background: linear-gradient(180deg, #E6F3FF 0%, #F5F5F5 100%);
	padding: 16px;
	box-sizing: border-box;
}

/* 用户信息区域 */
.user-info-section {
	background: linear-gradient(135deg, #7BC6FF 0%, #4A90E2 100%);
	padding: 24px;
	border-radius: 16px;
	box-shadow: 0 4px 12px rgba(74,144,226,0.3);
	margin-bottom: 20px;
}

.user-info {
	display: flex;
	align-items: flex-start;
	justify-content: space-between;
}

.info-content {
	flex: 1;
	margin-right: 20px;
}

.avatar-section {
	position: relative;
	align-self: flex-start;
}

.avatar {
	width: 80px;
	height: 80px;
	border-radius: 40px;
	border: 3px solid rgba(255,255,255,0.8);
	box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.edit-avatar-hint {
	position: absolute;
	left: 0;
	right: 0;
	bottom: 0;
	background: rgba(0,0,0,0.5);
	color: #FFFFFF;
	font-size: 12px;
	text-align: center;
	padding: 4px 0;
	border-bottom-left-radius: 40px;
	border-bottom-right-radius: 40px;
}

.user-name {
	font-size: 24px;
	color: #FFFFFF;
	font-weight: bold;
	margin-bottom: 12px;
	display: block;
	text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.user-phone {
	font-size: 16px;
	color: rgba(255,255,255,0.9);
	margin-bottom: 8px;
	display: block;
}

.doctor-info {
	font-size: 14px;
	color: rgba(255,255,255,0.9);
	margin-bottom: 8px;
	display: block;
}

.symptom-score {
	font-size: 14px;
	color: rgba(255,255,255,0.9);
	display: block;
}

/* 功能列表 */
.menu-list {
    display: flex;
    flex-direction: column;
    background-color: #FFFFFF;
    padding: 0 16px;
}

.menu-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 48px;
    border-bottom: 1px solid #EEEEEE;
}

.menu-text {
    font-size: 16px;
    color: #000000;
    text-align: left; /* 确保文字左对齐 */
}

.arrow {
    font-size: 16px;
    color: #CCCCCC;
}

.menu-item {
	height: 60px;
	padding: 0 20px;
	display: flex;
	align-items: center;
	justify-content: space-between;
	border-bottom: 1px solidrgb(92, 38, 38);
	transition: all 0.3s ease;
}

.menu-item:active {
	background-color: #F5F5F5;
	transform: scale(0.98);
}

.menu-item:last-child {
	border-bottom: none;
}

.menu-text {
	font-size: 16px;
	color: #333333;
	font-weight: 500;
}

.arrow {
	color: #CCCCCC;
	font-size: 16px;
}

/* 退出登录按钮 */
.logout-section {
	margin-top: 32px;
	padding: 0 4px;
}

.logout-button {
	width: 100%;
	height: 52px;
	background: linear-gradient(135deg, #FF4D4F 0%, #FF7875 100%);
	color: #FFFFFF;
	font-size: 16px;
	font-weight: 500;
	border-radius: 26px;
	display: flex;
	align-items: center;
	justify-content: center;
	border: none;
	box-shadow: 0 4px 12px rgba(255,77,79,0.2);
	transition: all 0.3s ease;
}

.logout-button:active {
	transform: scale(0.98);
	opacity: 0.9;
}
</style> 